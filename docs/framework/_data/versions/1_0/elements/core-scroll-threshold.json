{
  "name": "core-scroll-threshold",
  "description": "\n`core-scroll-threshold` is a utility element that listens for `scroll` events from a\nscrollable region and fires events to indicate when the scroller has reached a pre-defined\nlimit, specified in pixels from the upper and lower bounds of the scrollable region.\n\nThis element may wrap a scrollable region and will listen for `scroll` events bubbling\nthrough it from its children.  In this case, care should be taken that only one scrollable\nregion with the same orientation as this element is contained within.  Alternatively,\nthe `scrollTarget` property can be set/bound to a non-child scrollable region, from which\nit will listen for events.\n\nOnce a threshold has been reached, a `lower-trigger` or `upper-trigger` event will\nbe fired, at which point the user may perform actions such as lazily-loading more data\nto be displayed.  After any work is done, the user must then clear the threshold by\ncalling the `clearUpper` or `clearLower` methods on this element, after which it will\nbegin listening again for the scroll position to reach the threshold again assuming\nthe content in the scrollable region has grown.  If the user no longer wishes to receive\nevents (e.g. all data has been exhausted), the threshold property in question (e.g.\n`lowerThreshold`) may be set to a falsy value to disable events and clear the associated\ntriggered property.\n\nExample:\n\n    <core-scroll-threshold id=\"threshold\" lowerThreshold=\"500\"\n      on-lower-trigger=\"{{loadMore}}\" lowerTriggered=\"{{spinnerShouldShow}}\">\n    </core-scroll-threshold>\n\n    ...\n\n    loadMore: function() {\n      this.asyncLoadStuffThen(function() {\n        this.$.threshold.clearLower();\n      }.bind(this));\n    }\n\n",
  "homepage": "github.io",
  "events": [
    {
      "name": "upper-trigger",
      "description": "\nFired when `upperTriggered` becomes `true`.\n\n"
    },
    {
      "name": "lower-trigger",
      "description": "\nFired when `lowerTriggered` becomes `true`.\n\n"
    }
  ],
  "attributes": [
    {
      "name": "scrollTarget",
      "description": "\nWhen set, the given element is observed for scroll position.  When undefined,\nchildren can be placed inside and element itself can be used as the scrollable\nelement.\n\n",
      "type": "Element",
      "default": "null"
    },
    {
      "name": "orient",
      "description": "\nOrientation of the scroller to be observed (`v` for vertical, `h` for horizontal)\n\n",
      "type": "boolean",
      "default": "'v'"
    },
    {
      "name": "upperThreshold",
      "description": "\nDistance from the top (or left, for horizontal) bound of the scroller\nwhere the \"upper trigger\" will fire.\n\n",
      "type": "integer",
      "default": "null"
    },
    {
      "name": "lowerThreshold",
      "description": "\nDistance from the bottom (or right, for horizontal) bound of the scroller\nwhere the \"lower trigger\" will fire.\n\n",
      "type": "integer",
      "default": "null"
    },
    {
      "name": "upperTriggered",
      "description": "\nRead-only value that tracks the triggered state of the upper threshold\n\n",
      "type": "boolean",
      "default": "false"
    },
    {
      "name": "lowerTriggered",
      "description": "\nRead-only value that tracks the triggered state of the lower threshold\n\n",
      "type": "boolean",
      "default": "false"
    }
  ],
  "methods": [
    {
      "name": "clearUpper",
      "description": "\nClear the upper threshold, following an `upper-trigger` event.\n\n"
    },
    {
      "name": "clearLower",
      "description": "\nClear the lower threshold, following a `lower-trigger` event.\n\n"
    }
  ],
  "location": "1.0/components/core-scroll-threshold/core-scroll-threshold.html",
  "inherited": {
    "methods": [],
    "attributes": [],
    "events": [],
    "properties": []
  }
}