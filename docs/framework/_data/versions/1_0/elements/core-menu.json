{
  "name": "core-menu",
  "description": "\n`core-menu` is a selector which styles to looks like a menu.\n\n    <core-menu selected=\"0\">\n      <core-item icon=\"settings\" label=\"Settings\"></core-item>\n      <core-item icon=\"dialog\" label=\"Dialog\"></core-item>\n      <core-item icon=\"search\" label=\"Search\"></core-item>\n    </core-menu>\n\nWhen an item is selected the `core-selected` class is added to it.  The user can\nuse the class to add more stylings to the selected item.\n\n    core-item.core-selected {\n      color: red;\n    }\n\nThe `selectedItem` property references the selected item.\n\n    <core-menu selected=\"0\" selectedItem=\"{{item}}\">\n      <core-item icon=\"settings\" label=\"Settings\"></core-item>\n      <core-item icon=\"dialog\" label=\"Dialog\"></core-item>\n      <core-item icon=\"search\" label=\"Search\"></core-item>\n    </core-menu>\n\n    <div>selected label: {{item.label}}</div>\n\nThe `core-select` event signals selection change.\n\n    <core-menu selected=\"0\" on-core-select=\"{{selectAction}}\">\n      <core-item icon=\"settings\" label=\"Settings\"></core-item>\n      <core-item icon=\"dialog\" label=\"Dialog\"></core-item>\n      <core-item icon=\"search\" label=\"Search\"></core-item>\n    </core-menu>\n\n    ...\n\n    selectAction: function(e, detail) {\n      if (detail.isSelected) {\n        var selectedItem = detail.item;\n        ...\n      }\n    }\n\n",
  "extends": [
    {
      "name": "core-selector",
      "url": null
    }
  ],
  "location": "1.0/components/core-menu/core-menu.html",
  "inherited": {
    "methods": [
      {
        "name": "core-selector",
        "methods": [
          {
            "name": "selectPrevious",
            "description": "\nSelects the previous item. This should be used in single selection only.\n\nwrap to the end\n",
            "params": [
              {
                "type": "boolean",
                "name": "wrapped",
                "description": "if true and it is already at the first item,"
              }
            ]
          },
          {
            "name": "selectNext",
            "description": "\nSelects the next item.  This should be used in single selection only.\n\nwrap to the front\n",
            "params": [
              {
                "type": "boolean",
                "name": "wrapped",
                "description": "if true and it is already at the last item,"
              }
            ]
          }
        ]
      }
    ],
    "attributes": [
      {
        "name": "core-selector",
        "attributes": [
          {
            "name": "selected",
            "description": "\nGets or sets the selected element.  Default to use the index\nof the item element.\n\nIf you want a specific attribute value of the element to be\nused instead of index, set \"valueattr\" to that attribute name.\n\nExample:\n\n    <core-selector valueattr=\"label\" selected=\"foo\">\n      <div label=\"foo\"></div>\n      <div label=\"bar\"></div>\n      <div label=\"zot\"></div>\n    </core-selector>\n\nIn multi-selection this should be an array of values.\n\nExample:\n\n    <core-selector id=\"selector\" valueattr=\"label\" multi>\n      <div label=\"foo\"></div>\n      <div label=\"bar\"></div>\n      <div label=\"zot\"></div>\n    </core-selector>\n\n    this.$.selector.selected = ['foo', 'zot'];\n\n",
            "type": "Object",
            "default": "null"
          },
          {
            "name": "multi",
            "description": "\nIf true, multiple selections are allowed.\n\n",
            "type": "boolean",
            "default": "false"
          },
          {
            "name": "valueattr",
            "description": "\nSpecifies the attribute to be used for \"selected\" attribute.\n\n",
            "type": "string",
            "default": "'name'"
          },
          {
            "name": "selectedClass",
            "description": "\nSpecifies the CSS class to be used to add to the selected element.\n\n",
            "type": "string",
            "default": "'core-selected'"
          },
          {
            "name": "selectedProperty",
            "description": "\nSpecifies the property to be used to set on the selected element\nto indicate its active state.\n\n",
            "type": "string",
            "default": "''"
          },
          {
            "name": "selectedAttribute",
            "description": "\nSpecifies the attribute to set on the selected element to indicate\nits active state.\n\n",
            "type": "string",
            "default": "'active'"
          },
          {
            "name": "selectedItem",
            "description": "\nReturns the currently selected element. In multi-selection this returns\nan array of selected elements.\nNote that you should not use this to set the selection. Instead use\n`selected`.\n\n",
            "type": "Object",
            "default": "null"
          },
          {
            "name": "selectedModel",
            "description": "\nIn single selection, this returns the model associated with the\nselected element.\nNote that you should not use this to set the selection. Instead use\n`selected`.\n\n",
            "type": "Object",
            "default": "null"
          },
          {
            "name": "selectedIndex",
            "description": "\nIn single selection, this returns the selected index.\nNote that you should not use this to set the selection. Instead use\n`selected`.\n\n",
            "type": "number",
            "default": "-1"
          },
          {
            "name": "excludedLocalNames",
            "description": "\nNodes with local name that are in the list will not be included\nin the selection items.  In the following example, `items` returns four\n`core-item`'s and doesn't include `h3` and `hr`.\n\n    <core-selector excludedLocalNames=\"h3 hr\">\n      <h3>Header</h3>\n      <core-item>Item1</core-item>\n      <core-item>Item2</core-item>\n      <hr>\n      <core-item>Item3</core-item>\n      <core-item>Item4</core-item>\n    </core-selector>\n\n",
            "type": "string",
            "default": "''"
          },
          {
            "name": "target",
            "description": "\nThe target element that contains items.  If this is not set\ncore-selector is the container.\n\n",
            "type": "Object",
            "default": "null"
          },
          {
            "name": "itemsSelector",
            "description": "\nThis can be used to query nodes from the target node to be used for\nselection items.  Note this only works if `target` is set\nand is not `core-selector` itself.\n\nExample:\n\n    <core-selector target=\"{{$.myForm}}\" itemsSelector=\"input[type=radio]\"></core-selector>\n    <form id=\"myForm\">\n      <label><input type=\"radio\" name=\"color\" value=\"red\"> Red</label> <br>\n      <label><input type=\"radio\" name=\"color\" value=\"green\"> Green</label> <br>\n      <label><input type=\"radio\" name=\"color\" value=\"blue\"> Blue</label> <br>\n      <p>color = {{color}}</p>\n    </form>\n\n",
            "type": "string",
            "default": "''"
          },
          {
            "name": "activateEvent",
            "description": "\nThe event that would be fired from the item element to indicate\nit is being selected.\n\n",
            "type": "string",
            "default": "'tap'"
          },
          {
            "name": "notap",
            "description": "\nSet this to true to disallow changing the selection via the\n`activateEvent`.\n\n",
            "type": "boolean",
            "default": "false"
          }
        ]
      }
    ],
    "events": [
      {
        "name": "core-selector",
        "events": [
          {
            "name": "core-select",
            "description": "\nFired when an item's selection state is changed. This event is fired both\nwhen an item is selected or deselected. The `isSelected` detail property\ncontains the selection state.\n\n",
            "params": [
              {
                "type": "boolean",
                "name": "detail.isSelected",
                "description": "true for selection and false for deselection"
              },
              {
                "type": "Object",
                "name": "detail.item",
                "description": "the item element"
              }
            ]
          },
          {
            "name": "core-activate",
            "description": "\nFired when an item element is tapped.\n\n",
            "params": [
              {
                "type": "Object",
                "name": "detail.item",
                "description": "the item element"
              }
            ]
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "core-selector",
        "properties": [
          {
            "name": "items",
            "description": "\nReturns an array of all items.\n\n",
            "type": "array"
          }
        ]
      }
    ]
  }
}